import re
import telebot
import telebot.types as types
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup
import config  # –º–æ–¥—É–ª—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Ç.–¥.)
from main import Car, Note

user_sessions = {}


def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            'current_car_id': 0,
            'chat_id': 0,
            'username': f"user_{user_id}",
            'notes_data': {},
            'editing_note_id': None,
            'editing_note_text': None
        }
    return user_sessions[user_id]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
    user_data['username'] = username
    user_data['chat_id'] = message.chat.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ –º–µ–Ω—é –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º
    show_main_menu(message.chat.id, user_data)
    # show_second_menu(message.chat.id, user_data)


def show_main_menu(chat_id, user_data):
    markup = types.InlineKeyboardMarkup(row_width=1)

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –º–µ–Ω—é
    btn_create = types.InlineKeyboardButton(
        text="üöó –°–æ–∑–¥–∞—Ç—å –º–∞—à–∏–Ω—É",
        callback_data="command:/create_car"
    )
    btn_set_id = types.InlineKeyboardButton(
        text="üî¢ –í–´–ë–†–ê–¢–¨ –ú–ê–®–ò–ù–£",
        callback_data="command:/select_car"
    )
    btn_clear = types.InlineKeyboardButton(
        text=" ", callback_data=' '
    )
    btn_archive = types.InlineKeyboardButton(
        text="üìÅ –ê—Ä—Ö–∏–≤", callback_data='command:/archive'
    )
    btn_move_archive = types.InlineKeyboardButton(
        text="üöó‚û°Ô∏èüìÅ –¢–ï–ö–£–©–£–Æ –ú–ê–®–ò–ù–£ –í –ê–†–•–ò–í", callback_data='car_to_archive'
    )
    markup.add(btn_create, btn_set_id, btn_move_archive, btn_archive)

    bot.send_message(
        chat_id,
        "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"<b>–¢–ï–ö–£–©–ê–Ø –ú–ê–®–ò–ù–ê: ID {user_data['current_car_id']}</b>\n",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('command:'))
def handle_command_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    user_data = get_user_data(user_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ callback_data
    command = call.data.split(':')[1]

    # –°–æ–∑–¥–∞–µ–º mock-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    class MockMessage:
        def __init__(self, chat_id, text):
            self.chat = type('Chat', (), {'id': chat_id})()
            self.text = text
            self.from_user = call.from_user

    # –°–æ–∑–¥–∞–µ–º mock-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    mock_message = MockMessage(chat_id, command)

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    if command == '/create_car':
        init_car_command(mock_message)
    elif command == '/delete_car':
        delete_car(mock_message)
    elif command == '/show_car_list':
        show_car_command(mock_message)
    elif command == '/set_id':
        ask_id(mock_message)
    elif command == '/select_car':
        select_car_from_list(mock_message)
    elif command == '/archive':
        select_archive_car_from_list(mock_message)
    elif command == '/add_note':
        ask_note(mock_message)
    elif command == '/print_notes':
        print_notes_for_car(user_id)
    elif command == '/do_car_active_again':
        do_car_active_again_command(mock_message)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    bot.answer_callback_query(call.id, f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_car:'))
def handle_car_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    user_data = get_user_data(user_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—à–∏–Ω—ã –∏–∑ callback_data
    car_id = int(call.data.split(':')[1])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—à–∏–Ω—É
    user_data['current_car_id'] = car_id
    user_data['chat_id'] = chat_id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    car = Car()
    car_name = car.get_car_name(car_id) or f"ID {car_id}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.send_message(chat_id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞: {car_name} (ID: {car_id})")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º ID
    show_main_menu(chat_id, user_data)
    print_notes_for_car(user_id)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞: {car_name}")


def select_car_from_list(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    car = Car()
    results = car.show_active_list()

    if isinstance(results, str):  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ—à–∏–±–∫–∞
        bot.send_message(message.chat.id, results)
        return

    if not results:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—à–∏–Ω–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)

    for row in results:
        car_id = row[0]  # ID –º–∞—à–∏–Ω—ã
        car_name = row[1] if len(row) > 1 else f"–ú–∞—à–∏–Ω–∞ {car_id}"  # –ù–∞–∑–≤–∞–Ω–∏–µ

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
        btn_car = types.InlineKeyboardButton(
            text=f"{car_name} (ID: {car_id})",
            callback_data=f"select_car:{car_id}"
        )
        markup.add(btn_car)

    bot.send_message(
        message.chat.id,
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –º–∞—à–∏–Ω–∞: ID {user_data['current_car_id']}",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'do_car_active_again')
def handle_do_car_active_again(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    car = Car()
    result = car.do_car_active_again(user_data['current_car_id'])
    bot.send_message(user_data['chat_id'], result)
    bot.answer_callback_query(call.id, "–ú–∞—à–∏–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")


def do_car_active_again_command(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    car = Car()
    result = car.do_car_active_again(user_data['current_car_id'])
    bot.send_message(user_data['chat_id'], result)


@bot.callback_query_handler(func=lambda call: call.data == 'car_to_archive')
def confirm_car_to_archive(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)
    bot.send_message(
        user_data['chat_id'],
        "–í–≤–µ–¥–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –º–∞—à–∏–Ω—É –≤ –∞—Ä—Ö–∏–≤",
    )
    bot.register_next_step_handler(call.message, car_to_archive)


def car_to_archive(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        car = Car()
        result = car.move_car_to_archive(car_id=user_data['current_car_id'])
        bot.send_message(message.chat.id, result)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="üî¢ –í—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É", callback_data="command:/select_car"))
        bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤ –º–∞—à–∏–Ω—ã ID:{user_data["current_car_id"]}')


def select_archive_car_from_list(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    car = Car()
    results = car.show_not_active_list()

    if isinstance(results, str):  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ—à–∏–±–∫–∞
        bot.send_message(message.chat.id, results)
        return

    if not results:
        bot.send_message(message.chat.id, "–ù–µ—Ç –º–∞—à–∏–Ω –≤ –∞—Ä—Ö–∏–≤–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—à–∏–Ω–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)

    for row in results:
        car_id = row[0]  # ID –º–∞—à–∏–Ω—ã
        car_name = row[1] if len(row) > 1 else f"–ú–∞—à–∏–Ω–∞ {car_id}"  # –ù–∞–∑–≤–∞–Ω–∏–µ

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
        btn_car = types.InlineKeyboardButton(
            text=f"{car_name} (ID: {car_id})",
            callback_data=f"select_archive_car:{car_id}"
        )
        markup.add(btn_car)

    bot.send_message(
        message.chat.id,
        "üìã <b>–ê—Ä—Ö–∏–≤</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
        parse_mode='HTML',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_archive_car:'))
def handle_archive_car_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    user_data = get_user_data(user_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—à–∏–Ω—ã –∏–∑ callback_data
    car_id = int(call.data.split(':')[1])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—à–∏–Ω—É
    user_data['current_car_id'] = car_id
    user_data['chat_id'] = chat_id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    car = Car()
    car_name = car.get_car_name(car_id) or f"ID {car_id}"

    markup = InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="‚ö°–°–¥–µ–ª–∞—Ç—å –º–∞—à–∏–Ω—É —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ–π", callback_data="do_car_active_again"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.send_message(chat_id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞: {car_name} (ID: {car_id})", reply_markup=markup)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º ID
    show_main_menu(chat_id, user_data)
    print_notes_for_archive_car(user_id)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ –º–∞—à–∏–Ω–∞: {car_name}")


@bot.message_handler(commands=['set_id'])
def ask_id(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ ID –º–∞—à–∏–Ω—ã —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –±—É–¥–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:",
    )
    bot.register_next_step_handler(message, set_id)


def set_id(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if str(message.text).isdecimal():
        user_data['current_car_id'] = int(message.text)
        user_data['chat_id'] = message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        car = Car()
        car_name = car.get_car_name(user_data['current_car_id']) or f"ID {user_data['current_car_id']}"

        bot.send_message(message.chat.id, f"‚úÖ ID –º–∞—à–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {car_name}")
    else:
        bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")


@bot.message_handler(commands=['select_car'])
def select_car_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /select_car"""
    select_car_from_list(message)


@bot.message_handler(commands=['create_car'])
def init_car_command(message):
    markup = ReplyKeyboardMarkup()
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, add_car)


def add_car(message):
    car = Car()
    if re.match(r'^/', message.text):
        bot.send_message(
            message.chat.id,
            '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑'
        )
        return None
    result = car.add_car(car_name=message.text)
    bot.send_message(
        message.chat.id,
        result
    )


@bot.message_handler(commands=['delete_car'])
def delete_car(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    bot.send_message(
        user_data['chat_id'],
        "–í–≤–µ–¥–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É",
    )
    bot.register_next_step_handler(message, delete)


def delete(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        car = Car()
        result = car.delete_car_by_id(car_id=user_data['current_car_id'])
        bot.send_message(message.chat.id, result)
    else:
        bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã ID:{user_data["current_car_id"]}')


@bot.message_handler(commands=['add_note'])
def ask_note(message):
    markup = ReplyKeyboardMarkup()
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, add_note_to_car)


def add_note_to_car(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    note = Note()
    username = message.from_user.username or message.from_user.first_name or f"user_{message.from_user.id}"
    result = note.add_note(note_text=message.text, car_id=user_data['current_car_id'], user_id=username)
    bot.send_message(message.chat.id, result)


@bot.message_handler(commands=['show_car_list'])
def show_car_command(message):
    car = Car()
    results = car.show_active_list()

    if isinstance(results, str):
        bot.send_message(message.chat.id, results)
        return

    if not results:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω:", reply_markup=markup)

    for row in results:
        car_id = row[0]
        car_name = row[1] if len(row) > 1 else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        car_info = f"ID: {car_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {car_name}"
        bot.send_message(message.chat.id, car_info)


def print_notes_for_car(user_id):
    user_data = get_user_data(user_id)

    markup = InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
        callback_data=f"edit_last_note:{user_id}"
    ))
    markup.add(types.InlineKeyboardButton(
        text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
        callback_data="command:/add_note"
    ))

    car = Car()
    note = Note()

    result = note.get_notes_with_ids(user_data['current_car_id'])

    if not result:
        bot.send_message(user_data['chat_id'], '–î–ª—è —ç—Ç–æ–π –º–∞—à–∏–Ω—ã –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π', reply_markup=markup)
        return None

    if isinstance(result, str) and '–û—à–∏–±–∫–∞' in result:
        bot.send_message(user_data['chat_id'], result)
        return

    user_data['notes_data'] = {}
    for note_id, note_text, username in result:
        user_data['notes_data'][note_id] = (note_text, username)

    name = car.get_car_name(user_data['current_car_id']) or f"ID {user_data['current_car_id']}"
    summary = f'üöó {name}\n\n'

    user_notes = {}
    for note_id, note_text, username in result:
        if username not in user_notes:
            user_notes[username] = []
        user_notes[username].append(note_text)

    for username, notes in user_notes.items():
        summary += f'üë§ @{username}:\n'
        for i, note_text in enumerate(notes, 1):
            summary += f'    {i}. {note_text}\n'
        summary += '\n'

    bot.send_message(user_data['chat_id'], summary, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_last_note:'))
def ask_edit_last_note(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = int(call.data.split(':')[1])
    user_data = get_user_data(user_id)

    note = Note()
    result = note.get_notes_with_ids(user_data['current_car_id'])

    if not result or (isinstance(result, str) and '–û—à–∏–±–∫–∞' in result):
        bot.send_message(user_data['chat_id'], "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        bot.answer_callback_query(call.id, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        return

    user_data['notes_data'] = {}
    for note_id, note_text, username in result:
        user_data['notes_data'][note_id] = (note_text, username)

    markup = types.InlineKeyboardMarkup(row_width=1)

    for note_id, note_text, username in result:
        truncated_text = (note_text[:17] + "...") if len(note_text) > 20 else note_text

        btn_note = types.InlineKeyboardButton(
            text=f"üìù #{note_id}: {truncated_text}",
            callback_data=f"select_note:{note_id}:{user_id}"
        )
        markup.add(btn_note)

    btn_cancel = types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"cancel_note_select:{user_id}"
    )
    markup.add(btn_cancel)

    bot.send_message(
        user_data['chat_id'],
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        "üí° <i>–¶–∏—Ñ—Ä–∞ –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º - ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</i>",
        parse_mode='HTML',
        reply_markup=markup
    )

    bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_note:'))
def handle_note_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    parts = call.data.split(':')
    note_id = int(parts[1])
    user_id = int(parts[2])
    user_data = get_user_data(user_id)

    if note_id not in user_data.get('notes_data', {}):
        bot.send_message(user_data['chat_id'], "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")
        return

    note_text, username = user_data['notes_data'][note_id]

    user_data['editing_note_id'] = note_id
    user_data['editing_note_text'] = note_text

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_note_text:{note_id}:{user_id}"),
        types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_note:{note_id}:{user_id}")
    )
    markup.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_action:{user_id}"))

    display_text = note_text[:100] + "..." if len(note_text) > 100 else note_text

    bot.send_message(
        user_data['chat_id'],
        f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        f"<b>ID –≤ –ë–î:</b> {note_id}\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username}\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n<i>{display_text}</i>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=markup
    )

    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{note_id}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_note_text:'))
def start_edit_note_text(call):
    """–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    parts = call.data.split(':')
    note_id = int(parts[1])
    user_id = int(parts[2])
    user_data = get_user_data(user_id)

    if note_id not in user_data.get('notes_data', {}):
        bot.send_message(user_data['chat_id'], "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")
        return

    note_text, username = user_data['notes_data'][note_id]
    user_data['editing_note_id'] = note_id
    user_data['editing_note_text'] = note_text

    display_text = note_text[:100] + "..." if len(note_text) > 100 else note_text

    bot.send_message(
        user_data['chat_id'],
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è #{note_id}:</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{display_text}</i>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
        parse_mode='HTML'
    )

    bot.register_next_step_handler(call.message, lambda m: edit_note_text(m, user_id))
    bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_note:'))
def delete_note(call):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    parts = call.data.split(':')
    note_id = int(parts[1])
    user_id = int(parts[2])
    user_data = get_user_data(user_id)

    if note_id not in user_data.get('notes_data', {}):
        bot.send_message(user_data['chat_id'], "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")
        return

    note_text, username = user_data['notes_data'][note_id]

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{note_id}:{user_id}"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_action:{user_id}")
    )

    display_text = note_text[:100] + "..." if len(note_text) > 100 else note_text

    bot.send_message(
        user_data['chat_id'],
        f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:</b>\n\n"
        f"<b>ID:</b> {note_id}\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n<i>{display_text}</i>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
        parse_mode='HTML',
        reply_markup=markup
    )

    bot.answer_callback_query(call.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete:'))
def confirm_delete_note(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    parts = call.data.split(':')
    note_id = int(parts[1])
    user_id = int(parts[2])
    user_data = get_user_data(user_id)

    note = Note()
    result = note.delete_note_by_id(note_id)

    if "—É—Å–ø–µ—à–Ω–æ" in result.lower() or "—É–¥–∞–ª–µ–Ω" in result.lower():
        bot.send_message(user_data['chat_id'], f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{note_id} —É–¥–∞–ª–µ–Ω–æ")
        print_notes_for_car(user_id)
    else:
        bot.send_message(user_data['chat_id'], f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {result}")

    bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")


def edit_note_text(message, user_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_data = get_user_data(user_id)

    if 'editing_note_id' not in user_data:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        return

    new_text = message.text
    note_id = user_data['editing_note_id']
    old_text = user_data.get('editing_note_text', '')

    note = Note()
    result = note.update_note_text(note_id, new_text)

    if "—É—Å–ø–µ—à–Ω–æ" in result.lower() or "–æ–±–Ω–æ–≤–ª–µ–Ω" in result.lower():
        old_display = old_text[:100] + "..." if len(old_text) > 100 else old_text
        new_display = new_text[:100] + "..." if len(new_text) > 100 else new_text

        bot.send_message(
            message.chat.id,
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n",
            parse_mode='HTML'
        )
        print_notes_for_car(user_id)
    else:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {result}")

    user_data.pop('editing_note_id', None)
    user_data.pop('editing_note_text', None)


def print_notes_for_archive_car(user_id):
    user_data = get_user_data(user_id)

    car = Car()
    archive_result = car.print_note(user_data['current_car_id'])
    result = car.print_note(user_data['current_car_id'])

    if not result:
        bot.send_message(user_data['chat_id'], '–î–ª—è —ç—Ç–æ–π –º–∞—à–∏–Ω—ã –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π')
        return None
    if '–û—à–∏–±–∫–∞' in result:
        bot.send_message(user_data['chat_id'], result)

    name = car.get_car_name(user_data['current_car_id'])
    data = []
    summary = f'{archive_result}\n\n{name}\n'

    for n, i in result:
        data.append((i, n))

    prev_i = ''
    for i, n in sorted(data, key=lambda y: y[0]):
        if i != prev_i:
            summary += f'@{i}:\n    {n}\n'
        else:
            summary += f'   {n}\n'
        prev_i = i

    bot.send_message(user_data['chat_id'], summary)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()